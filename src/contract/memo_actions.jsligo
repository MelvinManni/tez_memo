//initialize types

type memo_record = {
    id: nat,
    owner: address,
    memo: string,
    time: timestamp,
    done: bool
};

type key_ = {
    id: nat,
    owner: address
};

type memos = map<key_, memo_record>;
type users = map<address, set<nat>>
type storage = {
    next_memo_id : nat,
    memos : memos,
    users : users,
}; 


type update_params = {
  id: nat,
  memo: string,
};

//initial storage expression 
let init_storage: storage = {
    next_memo_id: (1 as nat),
    memos: Map.empty,
    users: Map.empty,
}


let verifyMemoId = ([id, store]: [nat, storage]): bool => {
    return Map.mem({id: id, owner: Tezos.sender}, store.memos);
}



let verifyStringLength = (str_: string): bool => {
  return String.length(str_) <= (200 as nat);
}

let addMemo = ([store, memo] : [storage, string]) : storage => {
    
    //assign an id for the new memo
    const memo_id: nat = store.next_memo_id;

    const memo_key: key_ = {
        id: memo_id,
        owner: Tezos.sender
    };

    assert_with_error(verifyStringLength(memo), "memo length can not be greater than 200!");

    //verify if the id already exist
    assert_with_error(!verifyMemoId([memo_id, store]), "Memo id already exists");

    let new_memo: memo_record = {
        id: memo_id,
        owner: Tezos.sender,
        memo: memo,
        time: Tezos.now,
        done: false
    };
 
    //add the new memo to the memo map
    let new_memos: memos = Map.add(memo_key, new_memo, store.memos);

    //update users data
    let updated_users: users = match(Map.find_opt (Tezos.sender, store.users), {
        Some: (user_set: set<nat>) => {
            let updated_user_set: set<nat> = Set.add(memo_id, user_set)
            return Map.update(Tezos.sender, Some(updated_user_set), store.users)
        },
        None: () => Map.add(Tezos.sender, Set.literal(list([memo_id])), store.users)
    });
  
    let updated_store: storage = {
        //updated the id field for the next memo to ensure each id is unique
        next_memo_id: memo_id + (1 as nat),
        memos: new_memos,
        users: updated_users
    };
 
    return updated_store;
}

let toggleMemoStatus = ([store, memo_id] : [storage, nat]) : storage => {
    
    assert_with_error(verifyMemoId([memo_id, store]), "Memo id does not exist");

    const search_key: key_ = {
        id: memo_id,
        owner: Tezos.sender
    };

    //return the memo that matches the id param
    let existing_memo: memo_record = match(Map.find_opt (search_key, store.memos), {
    Some: (memo: memo_record) => memo,
    None: () => (failwith("Something went wrong!") as memo_record)
    });

    //toggles the value for the done key  
    let new_memos: memos = Map.update(search_key, Some(({...existing_memo, done: !existing_memo.done})), store.memos);
 
    let updated_store: storage = {
        next_memo_id: store.next_memo_id,
        memos: new_memos,
        users: store.users
    };

    return updated_store;
}

let updateMemo = ([store, update_params] : [storage, update_params]) : storage => {
    const memo_id: nat = update_params.id;
    const new_memo_string: string = update_params.memo;

    const search_key: key_ = {
        id: memo_id,
        owner: Tezos.sender
    };

    assert_with_error(verifyStringLength(new_memo_string), "memo length can not be greater than 200!");

    assert_with_error(verifyMemoId([memo_id, store]), "Memo id does not exist");

    let existing_memo: memo_record = match(Map.find_opt (search_key, store.memos), {
    Some: (memo: memo_record) => memo,
    None: () => (failwith("Something went wrong!") as memo_record)
    });

    let new_memos: memos = Map.update(search_key, Some(({...existing_memo, memo: new_memo_string})), store.memos);
 
    let updated_store: storage = {
        next_memo_id: store.next_memo_id,
        memos: new_memos,
        users: store.users
    };

    return updated_store;
}

let deleteMemo = ([store, memo_id] : [storage, nat]) : storage => {
    
    assert_with_error(verifyMemoId([memo_id, store]), "Memo id does not exist");

    const search_key: key_ = {
        id: memo_id,
        owner: Tezos.sender
    }

    let new_memos: memos = Map.remove(search_key, store.memos);

    let updated_users: users = match(Map.find_opt (Tezos.sender, store.users), {
        Some: (user_set: set<nat>) => {
            let updated_user_set: set<nat> = Set.remove(memo_id, user_set)
            return Map.update(Tezos.sender, Some(updated_user_set), store.users)
        },
        None: () => (failwith("Something went wrong!") as users)
    });

    let updated_store: storage = {
        next_memo_id: store.next_memo_id,
        memos: new_memos,
        users: updated_users
    };

    return updated_store;
};